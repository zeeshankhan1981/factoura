generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  User        User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Content Analysis Fields
  sentimentScore     Float?
  emotionalTone      String?
  objectivityScore   Float?
  tags              Tag[]
  analysisStatus    String   @default("pending") // pending, analyzing, completed, failed
  analysisUpdatedAt DateTime?
  
  // Blockchain verification fields
  verificationStatus String?  @default("pending") // pending, verified, failed
  transactionHash   String?
  blockNumber      Int?
  contentHash      String?
  verifiedAt       DateTime?

  // Relations
  analysisLogs     AnalysisLog[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type      String   // keyword, entity, topic
  relevance Float?
  articles  Article[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  role      String    @default("user") // user, editor, admin
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model AnalysisLog {
  id          Int      @id @default(autoincrement())
  articleId   Int
  Article     Article  @relation(fields: [articleId], references: [id])
  service     String   // content_analysis, ai_service
  status      String   // success, error
  result      Json?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
